package seed

// crypto/rand is a package imported with the alias `crand` to avoid name
// conflicts with math/rand. The encoding/binary package is used for
// converting data between byte slices and fixed-size values or native
// go data types. The math/rand package provides facilities for generating
// pseudo-random numbers.
import (
	crand "crypto/rand"
	"encoding/binary"
	"math/rand"
)

// Seed seeds a pseudo-random generator from math/rand with a cryptographically
// secure random number from crypto/rand.
func Seed() *rand.Rand {
	// Declare an array `b` of 8 bytes. This array is used to store
	// the cryptographically secure random bytes generated by
	// crypto/rand.
	var b [8]byte

	// The `crand.Read` function  fills the byte slice with random
	// data generated in a cryptographically secure manner.
	// The function returns the number of bytes written and an error if the
	// reading fails.
	_, err := crand.Read(b[:])
	if err != nil {
		panic("cannot seed with cryptographic number generator")
	}

	// The below seeds the pseudo-random number generator
	// - binary.LittleEndian.Uint64(b[:])
	//       Converts the first 8 bytes of the slice into an uint64 using
	//		 little-endian byte order (the least significant byte it at the smallest address).
	// - int64(...)
	//       Converts the uint64 value into an uint64 which is necessary because
	//  	 rand.NewSource expects an int64 seed.
	// - rand.NewSource(...)
	//        Creates a new pseudo-random generator seed with the specified int64 value.
	// - rand.New(...)
	//        Creates a new rand.Rand object seeded with the source.
	r := rand.New(rand.NewSource(int64(binary.LittleEndian.Uint64(b[:]))))

	return r
}
